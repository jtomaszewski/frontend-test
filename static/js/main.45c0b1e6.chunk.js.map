{"version":3,"sources":["apollo/client.ts","ui/Card.tsx","ui/CountryInfoCard.tsx","CountryInfo.tsx","ui/Select.tsx","CountrySelector.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["client","ApolloClient","uri","Card","props","className","children","CountryInfoCard","emoji","name","currency","languages","join","phoneCode","GET_COUNTRY_QUERY","gql","CountryInfo","useQuery","variables","code","loading","error","data","country","map","l","phone","Select","value","onChange","event","target","options","option","key","label","GET_COUNTRIES_QUERY","CountrySelector","countries","c","App","useState","setCode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAEaA,EAAS,I,MAAIC,GAAa,CACrCC,IAAK,wC,uDCAA,SAASC,EAAKC,GACnB,OAAO,yBAAKC,UAAU,QAAQD,EAAME,UCO/B,SAASC,EAAgBH,GAC9B,OACE,kBAAC,EAAD,KACE,4BACGA,EAAMI,MADT,IACiBJ,EAAMK,MAEvB,4BACGL,EAAMM,UACL,yCACY,gCAASN,EAAMM,WAG5BN,EAAMO,WACL,0CACa,gCAASP,EAAMO,UAAUC,KAAK,QAG5CR,EAAMS,WACL,2CACc,gCAAST,EAAMS,c,8cCzBhC,IAAMC,EAAoBC,IAAH,KA4Bf,SAASC,EAAYZ,GAA0B,IAAD,EAC1Ba,YAC/BH,EACA,CACEI,UAAW,CAAEC,KAAMf,EAAMe,QAHrBC,EADmD,EACnDA,QAASC,EAD0C,EAC1CA,MAAOC,EADmC,EACnCA,KAOxB,OAAIF,EACK,yCAGLC,EACK,0EAGJC,GAASA,EAAKC,QAKjB,kBAAChB,E,qVAAD,IAEOe,EAAKC,QAFZ,CAGIZ,UACEW,EAAKC,QAAQZ,WAAaW,EAAKC,QAAQZ,UAAUa,IAAI,SAAAC,GAAC,OAAIA,EAAEhB,OAC9DI,UAAWS,EAAKC,QAAQG,SATrB,uEC1CJ,SAASC,EAAOvB,GAOrB,OACE,4BAAQwB,MAAOxB,EAAMwB,MAAOC,SAPT,SAACC,GAChB1B,EAAMyB,UACRzB,EAAMyB,SAASC,EAAMC,OAAOH,SAM3BxB,EAAM4B,QAAQR,IAAI,SAAAS,GAAM,OACvB,4BAAQC,IAAKD,EAAOC,KAAOD,EAAOL,MAAOA,MAAOK,EAAOL,OACpDK,EAAOE,OAASF,EAAOL,U,kKCb3B,IAAMQ,EAAsBrB,IAAH,KAuBzB,SAASsB,EAAgBjC,GAA8B,IAAD,EAC1Ba,YAC/BmB,GADMhB,EADmD,EACnDA,QAASC,EAD0C,EAC1CA,MAAOC,EADmC,EACnCA,KAIxB,GAAIF,EACF,OAAO,KAGT,GAAIC,EACF,OAAO,KAGT,IAAKC,IAASA,EAAKgB,UACjB,OAAO,KAGT,IAAMN,EAAUV,EAAKgB,UAAUd,IAAI,SAAAe,GAAC,MAAK,CACvCL,IAAKK,EAAEpB,KACPS,MAAOW,EAAEpB,KACTgB,MAAOI,EAAE9B,QAGX,OACE,2BAAOJ,UAAU,mBACf,yBAAKA,UAAU,0BAAf,mBACA,kBAACsB,EAAD,CAAQC,MAAOxB,EAAMwB,MAAOI,QAASA,EAASH,SAAUzB,EAAMyB,YCnCrDW,MAbf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNtB,EADM,KACAuB,EADA,KAGb,OACE,kBAAC,IAAD,CAAgB1C,OAAQA,GACtB,yBAAKK,UAAU,OACb,kBAACW,EAAD,CAAaG,KAAMA,IACnB,kBAAC,EAAD,CAAiBS,MAAOT,EAAMU,SAAUa,OCF5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.45c0b1e6.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n});","import React from 'react';\nimport './Card.css';\n\nexport function Card(props: { children?: React.ReactNode }) {\n  return <div className=\"Card\">{props.children}</div>;\n}\n","import React from 'react';\nimport { Card } from './Card';\n\ninterface CountryInfoCardProps {\n  emoji: string;\n  name: string;\n  currency?: string;\n  languages?: string[];\n  phoneCode?: string;\n}\n\nexport function CountryInfoCard(props: CountryInfoCardProps) {\n  return (\n    <Card>\n      <h2>\n        {props.emoji} {props.name}\n      </h2>\n      <ul>\n        {props.currency && (\n          <li>\n            Currency: <strong>{props.currency}</strong>\n          </li>\n        )}\n        {props.languages && (\n          <li>\n            Languages: <strong>{props.languages.join(', ')}</strong>\n          </li>\n        )}\n        {props.phoneCode && (\n          <li>\n            Phone code: <strong>{props.phoneCode}</strong>\n          </li>\n        )}\n      </ul>\n    </Card>\n  );\n}\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { CountryInfoCard } from './ui/CountryInfoCard';\n\nexport const GET_COUNTRY_QUERY = gql`\n  query Country($code: String!) {\n    country(code: $code) {\n      emoji\n      name\n      currency\n      languages {\n        name\n      }\n      phone\n    }\n  }\n`;\n\nexport interface GetCountryQueryData {\n  country: {\n    emoji: string;\n    name: string;\n    currency: string;\n    languages: { name: string }[];\n    phone: string;\n  };\n}\n\ninterface CountryInfoProps {\n  code: string;\n}\n\nexport default function CountryInfo(props: CountryInfoProps) {\n  const { loading, error, data } = useQuery<GetCountryQueryData>(\n    GET_COUNTRY_QUERY,\n    {\n      variables: { code: props.code }\n    }\n  );\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Loading failed. Please refresh the browser.</p>;\n  }\n\n  if (!data || !data.country) {\n    return <p>Unknown country. Please try another one.</p>;\n  }\n\n  return (\n    <CountryInfoCard\n      {...{\n        ...data.country,\n        languages:\n          data.country.languages && data.country.languages.map(l => l.name),\n        phoneCode: data.country.phone\n      }}\n    />\n  );\n}\n","import React, { ChangeEvent } from 'react';\n\ninterface SelectProps {\n  value?: string;\n  options: { key?: string; label?: string; value: string }[];\n  onChange?(value: string): void;\n}\n\nexport function Select(props: SelectProps) {\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    if (props.onChange) {\n      props.onChange(event.target.value);\n    }\n  };\n\n  return (\n    <select value={props.value} onChange={handleChange}>\n      {props.options.map(option => (\n        <option key={option.key || option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </select>\n  );\n}\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Select } from './ui/Select';\nimport './CountrySelector.css';\n\nexport const GET_COUNTRIES_QUERY = gql`\n  query Country {\n    countries {\n      emoji\n      code\n      name\n    }\n  }\n`;\n\nexport interface GetCountriesQueryData {\n  countries: Array<{\n    emoji: string;\n    code: string;\n    name: string;\n  }>;\n}\n\ninterface CountrySelectorProps {\n  value?: string;\n  onChange?(value: string): void;\n}\n\nexport function CountrySelector(props: CountrySelectorProps) {\n  const { loading, error, data } = useQuery<GetCountriesQueryData>(\n    GET_COUNTRIES_QUERY\n  );\n\n  if (loading) {\n    return null;\n  }\n\n  if (error) {\n    return null;\n  }\n\n  if (!data || !data.countries) {\n    return null;\n  }\n\n  const options = data.countries.map(c => ({\n    key: c.code,\n    value: c.code,\n    label: c.name\n  }));\n\n  return (\n    <label className=\"CountrySelector\">\n      <div className=\"CountrySelector__label\">Choose country:</div>\n      <Select value={props.value} options={options} onChange={props.onChange} />\n    </label>\n  );\n}\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport React, { useState } from 'react';\nimport { client } from './apollo/client';\nimport './App.css';\nimport CountryInfo from './CountryInfo';\nimport { CountrySelector } from './CountrySelector';\n\nfunction App() {\n  const [code, setCode] = useState('CA');\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <CountryInfo code={code} />\n        <CountrySelector value={code} onChange={setCode} />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}